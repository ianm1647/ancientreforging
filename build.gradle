plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

version = project.mod_version
group = project.maven_group
fakerlib_version = project.fakerlib_version
zenith_attributes_version = project.zenith_attributes_version
zenith_version = project.zenith_version

repositories {
	maven { url = "https://maven.shedaniel.me/" }
	maven { url = "https://maven.terraformersmc.com" }
	maven { url = "https://maven.blamejared.com/" }
	maven { url = "https://api.modrinth.com/maven" }
	maven { url = "https://jitpack.io" }

	//zenith spam
	maven { url = "https://mvn.devos.one/releases/" }
	maven { url = 'https://maven.ladysnake.org/releases' }
	maven { url = "https://maven.jamieswhiteshirt.com/libs-release" }
	maven { url = "https://cursemaven.com" }
	maven { url = "https://maven.bai.lol" }
	maven { url = 'https://maven.kosmx.dev/' }
	maven { url = 'https://libs.azuredoom.com:4443/mods'}
	maven { url = "https://maven.parchmentmc.org" }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "maven.modrinth:fakerlib:${project.fakerlib_version}"
	modImplementation "maven.modrinth:zenith:${project.zenith_version}"
	modImplementation "maven.modrinth:zenith-attributes:${project.zenith_attributes_version}"

	modImplementation "vazkii.patchouli:Patchouli:${patchouli_version}"

	modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}"
	modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"

	modApi "com.terraformersmc:modmenu:${project.modmenu_version}"

	//zenith spam
	implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.2.0-beta.10"))
	implementation(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-fabric:0.0.2"))
	modImplementation("com.jamieswhiteshirt:reach-entity-attributes:${project.rea_version}")
	modImplementation("maven.modrinth:AdditionalEntityAttributes:${project.aea_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:loot:${project.port_lib_version}") //doubt
	modImplementation("io.github.fabricators_of_create.Porting-Lib:base:${project.port_lib_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:tags:${project.port_lib_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:utility:${project.port_lib_version}")
	modImplementation "curse.maven:jade-324717:${jade_id}"
	modImplementation("com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}")
	modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}")
	modImplementation("io.github.ladysnake:PlayerAbilityLib:${project.pal_version}")
}

base {
	archivesName = project.archives_base_name
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

loom {
	runs {
		//
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
		//
		datagenClient {
			inherit client
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${project.modid}"

			runDir "build/datagen"
		}
	}
}

//
// Adds the generated files into the jar you distribute to players.
//
sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}